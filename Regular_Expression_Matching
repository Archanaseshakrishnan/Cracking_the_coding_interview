class PatternNodes:
    def __init__(self, str_value, is_regex):
        self.str_value = str_value
        self.is_regex = is_regex #assume there is no kleene star *  
    def get_str_value(self):
        return self.str_value
    def is_str_regex(self):
        return self.is_regex


class Solution(object):
    def generate_pattern_nodes(self, p):
        p_len = len(p)
        word_so_far = ""
        pattern_node_list = []
        i = 0
        while i < p_len:
            #print(i, p[i])
            if p[i] == '*':
                last_letter = word_so_far[-1]
                word_so_far = word_so_far[:-1]
                if word_so_far != "":
                    pattern_node_list.append(PatternNodes(word_so_far, False))
                pattern_node_list.append(PatternNodes(last_letter, True))
                word_so_far = ""
            elif p[i] == '+':
                pattern_node_list.append(PatternNodes(word_so_far, False))
                last_letter = word_so_far[-1]
                pattern_node_list.append(PatternNodes(last_letter, True))
                word_so_far = ""
            elif p[i] == '.':
                if word_so_far != "":
                    pattern_node_list.append(PatternNodes(word_so_far, False))
                if i+1 < p_len:
                    if p[i+1] == '*':
                        pattern_node_list.append(PatternNodes('.', True))
                        i += 1
                    else:
                        pattern_node_list.append(PatternNodes('.', False))
                word_so_far = ""
            else:
                word_so_far += p[i]
            i += 1
        if word_so_far != "":
            pattern_node_list.append(PatternNodes(word_so_far, False)) 
        return pattern_node_list

    
    def exact_compare(self, s, s_index, exact_pattern, s_len):
        exact_pattern_index = 0
        exact_pattern_len = len(exact_pattern)
        while s_index < s_len and exact_pattern_index < exact_pattern_len:
            if s[s_index] != exact_pattern[exact_pattern_index]:
                return -1
            s_index += 1
            exact_pattern_index += 1
        if exact_pattern_index < exact_pattern_len:
            return -1
        return s_index

    def dp_compare(self, s, s_index, s_len, pattern_node_list, variable_pattern):
        # Check if there is a prefix match with pattern and exact match
        # If not 
        # easy -> go through optional match function and see if there is a match
        # If so,
        # too many conditions to check
        # DP to find the matches and see where to block

    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        pattern_node_list = self.generate_pattern_nodes(p)
        print(pattern_node_list[0].get_str_value(), pattern_node_list[0].is_regex)
        s_index = 0
        s_len = len(s)
        variable_pattern = ""
        pattern_index = 0

        for pattern_node in pattern_node_list:
            if variable_pattern == "" and pattern_node.is_regex == False:
                s_index = self.exact_compare(s, s_index, pattern_node.get_str_value(), s_len)
                print(s_index)
                if s_index == s_len:
                    return True
                elif s_index == -1:
                    return False
            elif pattern_node.is_regex == False:
                #We have variable_pattern, this is the first exact match after accruding some variable match
                s_index = self.dp_compare(s, s_index, s_len, pattern_node_list, variable_pattern, pattern_index)
                if s_index == s_len:
                    return True
                elif s_index == -1:
                    return False
            else:
                # Proceed till you find the first exact match
                variable_pattern += pattern_node.get_str_value()
            pattern_index += 1

        if variable_pattern != "" and s_index < s_len and s_index != -1:
            self.variable_match_check()
        return False
