class PatternNodes:
    def __init__(self, str_value, is_regex):
        self.str_value = str_value
        self.is_regex = is_regex #assume there is no kleene star *  
    def get_str_value(self):
        return self.str_value
    def is_str_regex(self):
        return self.is_regex

class Solution(object):

    def generate_pattern_nodes(self, p):
        p_len = len(p)
        word_so_far = ""
        pattern_node_list = []
        i = 0
        while i < p_len:
            if p[i] == '*':
                last_letter = word_so_far[-1]
                word_so_far = word_so_far[:-1]
                if word_so_far != "":
                    pattern_node_list.append(PatternNodes(word_so_far, False))
                pattern_node_list.append(PatternNodes(last_letter, True))
                word_so_far = ""
            elif p[i] == '+':
                pattern_node_list.append(PatternNodes(word_so_far, False))
                last_letter = word_so_far[-1]
                pattern_node_list.append(PatternNodes(last_letter, True))
                word_so_far = ""
            elif p[i] == '.':
                if i+1 < p_len:
                    if p[i+1] == '*':
                        if word_so_far != "":
                            pattern_node_list.append(PatternNodes(word_so_far, False))
                            word_so_far = ""
                        pattern_node_list.append(PatternNodes('.', True))
                        i += 1
                    else:
                        word_so_far += '.'
                else: #there is no i+1
                    word_so_far += '.'
                    pattern_node_list.append(PatternNodes(word_so_far, False))
                    word_so_far = ""
            else:
                word_so_far += p[i]
            i += 1

        if word_so_far != "":
            pattern_node_list.append(PatternNodes(word_so_far, False)) 
        return pattern_node_list

    def print_pattern_nodes(self, pattern_node_list):
        for pattern_node in pattern_node_list:
            print(pattern_node.get_str_value(), pattern_node.is_str_regex())

    def exact_compare(self, s, s_index, exact_pattern, s_len):
        exact_pattern_index = 0
        exact_pattern_len = len(exact_pattern)
        
        while s_index < s_len and exact_pattern_index < exact_pattern_len:
            if exact_pattern[exact_pattern_index] == '.' or s[s_index] == exact_pattern[exact_pattern_index]:
                s_index += 1
                exact_pattern_index += 1
            elif exact_pattern[exact_pattern_index] != '.' and s[s_index] != exact_pattern[exact_pattern_index]:
                return -1
        if exact_pattern_index < exact_pattern_len:
            return -1

        return s_index

    def variable_match_check(self, variable_pattern, s, s_index, s_len):
        if "." in variable_pattern:
            #It means that it is .*
            return s_len
        else:
            var_len = len(variable_pattern)
            s_ptr = s_index
            var_ptr = 0
            while s_ptr < s_len and var_ptr < var_len: 
                while var_ptr < var_len and s_ptr < s_len and (s[s_ptr] == variable_pattern[var_ptr] or s[s_ptr] == "." or variable_pattern[var_ptr] == "."):
                    s_ptr += 1
                if s_ptr < s_len: 
                    var_ptr += 1
            
            return s_ptr  

    def find_prefix_match(self, variable_pattern, exact_pattern):
        exact_p_index = self.variable_match_check(variable_pattern, exact_pattern, 0, len(exact_pattern))
        return exact_p_index
    
    def find_first_non_matching_char(self, s, s_index, s_len, variable_pattern, exact_pattern):
        cur_s_index = s_index 
        # Min or no overlap between exact_pattern and variable pattern
        # So just go ahead and find the exact_pattern within the input string starting
        # at index s_index
        # If there is a gap between the exact match pattern starting and the input s_index
        # see if it os accounted by the variable_pattern
        # If not return -1 
        while cur_s_index < s_len:
            temp = self.exact_compare(s, cur_s_index, exact_pattern, s_len)
            if temp == -1:
                #no match is found just increment index and search
                cur_s_index += 1
            else:
                #match is found, but check if there is some matching to be found between temp - cur_s_index 
                if temp - cur_s_index < temp - s_index:
                    temp_var = self.variable_match_check(variable_pattern, s, s_index, cur_s_index)
                    if temp_var < cur_s_index - s_index:
                        return -1
                return temp
        
        return -1

    def find_all_matching_char(self, s, s_index, s_len, variable_pattern, exact_pattern):
        cur_s_index = self.variable_match_check(variable_pattern, s, s_index, s_len)
        # cur_s_index would contain all the matching chars in variable pattern
        if cur_s_index == -1 or cur_s_index == s_index:
            # it means that if the super-set search fails due to the absence of any related character return -1
            return -1
        else:
            exact_pattern_len = len(exact_pattern)
            if exact_pattern_len == 1:
                if cur_s_index == s_len:
                    new_cur_s_index = cur_s_index - 1
                else:
                    new_cur_s_index = cur_s_index
            else:
                new_cur_s_index = cur_s_index - exact_pattern_len
            if new_cur_s_index < 0 or new_cur_s_index < s_index: 
                return -1
            else:
                exact_match = self.exact_compare(s, new_cur_s_index, exact_pattern, s_len)
                if exact_match == -1:
                    return -1 
                else:
                    return exact_match


    def dp_compare(self, s, s_index, s_len, pattern_node_list, pattern_node_index, variable_pattern):
        # TODO:
        # Check if there is a prefix match with pattern and exact match
        # If not 
        # easy -> go through optional match function and see if there is a match
        # If so,
        # too many conditions to check
        # DP to find the matches and see where to block
        exact_pattern = pattern_node_list[pattern_node_index].get_str_value()
        prefix_match_len = self.find_prefix_match(variable_pattern, exact_pattern)
        
        if prefix_match_len < len(exact_pattern) or variable_pattern == ".":
            index = self.find_first_non_matching_char(s, s_index, s_len, variable_pattern, exact_pattern)
            if index == -1:
                return -1
            else:
                return index
        else:
            #the whole exact_pattern matches and it's a problem
            index = self.find_all_matching_char(s, s_index, s_len, variable_pattern, exact_pattern)
            if index == -1:
                return -1
            else:
                return index     

    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        pattern_node_list = self.generate_pattern_nodes(p)
        self.print_pattern_nodes(pattern_node_list)

        s_index = 0
        s_len = len(s)
        variable_pattern = ""
        pattern_index = 0

        for pattern_node in pattern_node_list:
            if variable_pattern == "" and pattern_node.is_regex == False:
                s_index = self.exact_compare(s, s_index, pattern_node.get_str_value(), s_len)
                if s_index == -1:
                    return False
                variable_pattern = ""
            elif pattern_node.is_regex == False:
                #We have variable_pattern, this is the first exact match after accruding some variable match so far
                # We have to place DP solution here because we may never know the boundary of the variable match
                s_index = self.dp_compare(s, s_index, s_len, pattern_node_list, pattern_index, variable_pattern)
                variable_pattern = ""
                if s_index == -1:
                    return False
            else:
                # Proceed till you find the first exact match
                variable_pattern += pattern_node.get_str_value()
            pattern_index += 1

        #There are some variable / optional matches remaining
        if variable_pattern != "" and s_index < s_len and s_index != -1:
            s_index = self.variable_match_check(variable_pattern, s, s_index, s_len)

        if s_index == s_len:
            return True

        return False
